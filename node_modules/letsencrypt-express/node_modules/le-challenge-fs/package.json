{
  "name": "le-challenge-fs",
  "version": "2.0.5",
  "description": "A fs-based strategy for node-letsencrypt for setting, retrieving, and clearing ACME challenges issued by the ACME server",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Daplie/le-challenge-fs.git"
  },
  "keywords": [
    "le",
    "letsencrypt",
    "le-challenge",
    "le-challenge-",
    "acme",
    "challenge",
    "fs",
    "cluster",
    "ephemeral"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "license": "(MIT OR Apache-2.0)",
  "bugs": {
    "url": "https://github.com/Daplie/le-challenge-fs/issues"
  },
  "homepage": "https://github.com/Daplie/le-challenge-fs#readme",
  "dependencies": {
    "mkdirp": "^0.5.1"
  },
  "readme": "[![Join the chat at https://gitter.im/Daplie/letsencrypt-express](https://badges.gitter.im/Daplie/letsencrypt-express.svg)](https://gitter.im/Daplie/letsencrypt-express?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n| [letsencrypt](https://github.com/Daplie/node-letsencrypt) (library)\n| [letsencrypt-cli](https://github.com/Daplie/letsencrypt-cli)\n| [letsencrypt-express](https://github.com/Daplie/letsencrypt-express)\n| [letsencrypt-cluster](https://github.com/Daplie/letsencrypt-cluster)\n| [letsencrypt-koa](https://github.com/Daplie/letsencrypt-koa)\n| [letsencrypt-hapi](https://github.com/Daplie/letsencrypt-hapi)\n|\n\n# le-challenge-webroot\n\nA fs-based strategy for node-letsencrypt for setting, retrieving,\nand clearing ACME challenges issued by the ACME server\n\nThis places the acme challenge in an appropriate directory in the specified `webrootPath`\nand removes it once the challenge has either completed or failed.\n\n* Safe to use with node cluster\n* Safe to use with ephemeral services (Heroku, Joyent, etc)\n\nInstall\n-------\n\n```bash\nnpm install --save le-challenge-fs@2.x\n```\n\nUsage\n-----\n\n```bash\nvar leChallenge = require('le-challenge-fs').create({\n  webrootPath: '~/letsencrypt/srv/www/:hostname/.well-known/acme-challenge'\n, debug: false\n});\n\nvar LE = require('letsencrypt');\n\nLE.create({\n  server: LE.stagingServerUrl                               // Change to LE.productionServerUrl in production\n, challenge: leChallenge\n});\n```\n\nNOTE: If you request a certificate with 6 domains listed,\nit will require 6 individual challenges.\n\nExposed Methods\n---------------\n\nFor ACME Challenge:\n\n* `set(opts, domain, key, val, done)`\n* `get(defaults, domain, key, done)`\n* `remove(defaults, domain, key, done)`\n\nFor node-letsencrypt internals:\n\n* `getOptions()` returns the internal defaults merged with the user-supplied options\n* `loopback(defaults, domain, key, value, done)` test, by external means, that the ACME server's challenge server will succeed\n",
  "readmeFilename": "README.md",
  "_id": "le-challenge-fs@2.0.5",
  "_from": "le-challenge-fs@^2.0.4"
}
